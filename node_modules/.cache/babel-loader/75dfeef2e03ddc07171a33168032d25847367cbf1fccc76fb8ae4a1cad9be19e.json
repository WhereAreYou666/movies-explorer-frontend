{"ast":null,"code":"export default class MainApi{constructor(options){this._baseUrl=options.baseUrl;this._token=options.headers.authorization;this._headers=options.headers;this._contentType=options.headers['Content-Type'];}_getCheck(res){if(res.ok){return res.json();}else{return Promise.reject(res.status);}}getSavedCards(){return fetch(this._baseUrl+'/movies',{credentials:'include'}).then(res=>this._getCheck(res));}addNewCard(_ref){let{country,director,duration,year,description,image,trailerLink,nameRU,nameEN,thumbnail,movieId}=_ref;return fetch(this._baseUrl+'/movies',{method:'POST',credentials:'include',headers:{'Content-Type':this._contentType},body:JSON.stringify({country,director,duration,year,description,image,trailerLink,nameRU,nameEN,thumbnail,movieId})}).then(res=>this._getCheck(res));}getProfileContent(){return fetch(this._baseUrl+'/users/me',{credentials:'include'}).then(res=>this._getCheck(res));}submitProfileData(_ref2){let{name,email}=_ref2;return fetch(this._baseUrl+'/users/me',{method:'PATCH',credentials:'include',headers:{authorization:this._token,'Content-Type':this._contentType},body:JSON.stringify({name:name,email:email})}).then(res=>this._getCheck(res));}deleteCard(cardId){return fetch(this._baseUrl+\"/movies/\".concat(cardId),{method:'DELETE',credentials:'include',headers:this._headers}).then(res=>this._getCheck(res));}register(password,email,name){return fetch(\"\".concat(this._baseUrl,\"/signup\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password,email,name}),credentials:'include'}).then(res=>this._getCheck(res));}authorization(password,email){return fetch(\"\".concat(this._baseUrl,\"/signin\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password,email}),credentials:'include'}).then(res=>this._getCheck(res));}checkToken(){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{headers:{'Content-Type':'application/json'},credentials:'include'}).then(res=>this._getCheck(res));}clearCookie(){return fetch(\"\".concat(this._baseUrl,\"/signout\"),{headers:{'Content-Type':'application/json'},credentials:'include'}).then(res=>this._getCheck(res));}}export const mainApi=new MainApi({baseUrl:'https://api.rpmovies.nomoredomainswork.ru',headers:{'Content-Type':'application/json'}});","map":{"version":3,"names":["MainApi","constructor","options","_baseUrl","baseUrl","_token","headers","authorization","_headers","_contentType","_getCheck","res","ok","json","Promise","reject","status","getSavedCards","fetch","credentials","then","addNewCard","_ref","country","director","duration","year","description","image","trailerLink","nameRU","nameEN","thumbnail","movieId","method","body","JSON","stringify","getProfileContent","submitProfileData","_ref2","name","email","deleteCard","cardId","concat","register","password","checkToken","clearCookie","mainApi"],"sources":["/Users/ruslan/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["export default class MainApi {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._token = options.headers.authorization;\n    this._headers = options.headers;\n    this._contentType = options.headers['Content-Type'];\n  }\n\n  _getCheck(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  }\n\n  getSavedCards() {\n    return fetch(this._baseUrl + '/movies', {\n      credentials: 'include',\n    }).then(res => this._getCheck(res));\n  }\n\n  addNewCard({ country, director, duration, year, description,\n    image, trailerLink, nameRU, nameEN, thumbnail, movieId }) {\n    return fetch(this._baseUrl + '/movies', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        country,\n        director,\n        duration,\n        year,\n        description,\n        image,\n        trailerLink,\n        nameRU,\n        nameEN,\n        thumbnail,\n        movieId,\n      })\n    }).then(res => this._getCheck(res));\n  }\n\n  getProfileContent() {\n    return fetch(this._baseUrl + '/users/me', {\n      credentials: 'include',\n    }).then(res => this._getCheck(res));\n  }\n\n  submitProfileData({ name, email }) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: {\n        authorization: this._token,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        name: name,\n        email: email\n      })\n    }).then(res => this._getCheck(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(this._baseUrl + `/movies/${cardId}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: this._headers\n    }).then(res => this._getCheck(res));\n  }\n\n  register(password, email, name) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        password,\n        email,\n        name,\n      }),\n      credentials: 'include',\n    }).then(res => this._getCheck(res));\n  }\n\n  authorization(password, email) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        password,\n        email,\n      }),\n      credentials: 'include',\n    }).then(res => this._getCheck(res));\n  }\n\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    }).then(res => this._getCheck(res));\n  }\n\n  clearCookie() {\n    return fetch(`${this._baseUrl}/signout`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    }).then(res => this._getCheck(res));\n  }\n\n}\n\nexport const mainApi = new MainApi({\n  baseUrl: 'https://api.rpmovies.nomoredomainswork.ru',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}