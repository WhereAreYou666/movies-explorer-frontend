{"ast":null,"code":"import React,{useCallback}from'react';export function useFormWithValidation(){const[values,setValues]=React.useState({});const[errors,setErrors]=React.useState({});const[isValid,setIsValid]=React.useState(false);const regexName=/^[A-Za-zА-Яа-яёЁ]+(?:[-'\\s][A-Za-zА-Яа-яёЁ]+)*$/;const regexEmail=/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;const handleChange=evt=>{const input=evt.target;const value=input.value;const name=input.name;setValues({...values,[name]:value});if(name==='name'&&!regexName.test(value)){setErrors({...errors,[name]:'Имя может содержать латиницу, кириллицу, дефис или пробел'});setIsValid(false);}else if(name==='email'&&!regexEmail.test(value)){setErrors({...errors,[name]:'Введите корректный адрес электронной почты'});setIsValid(false);}else{setErrors({...errors,[name]:input.validationMessage});setIsValid(input.closest('form').checkValidity());}};const resetForm=useCallback(function(){let newValues=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let newErrors=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let newIsValid=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;setValues(newValues);setErrors(newErrors);setIsValid(newIsValid);},[setValues,setErrors,setIsValid]);return{values,handleChange,resetForm,errors,isValid};}","map":{"version":3,"names":["React","useCallback","useFormWithValidation","values","setValues","useState","errors","setErrors","isValid","setIsValid","regexName","regexEmail","handleChange","evt","input","target","value","name","test","validationMessage","closest","checkValidity","resetForm","newValues","arguments","length","undefined","newErrors","newIsValid"],"sources":["/Users/ruslan/movies-explorer-frontend/src/utils/useForm.js"],"sourcesContent":["import React, { useCallback } from 'react';\n\nexport function useFormWithValidation() {\n  const [values, setValues] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n  const [isValid, setIsValid] = React.useState(false);\n  const regexName = /^[A-Za-zА-Яа-яёЁ]+(?:[-'\\s][A-Za-zА-Яа-яёЁ]+)*$/;\n  const regexEmail = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n\n  const handleChange = (evt) => {\n    const input = evt.target;\n    const value = input.value;\n    const name = input.name;\n\n    setValues({ ...values, [name]: value });\n\n    if (name === 'name' && !regexName.test(value)) {\n      setErrors({ ...errors, [name]: 'Имя может содержать латиницу, кириллицу, дефис или пробел' });\n      setIsValid(false);\n    } else if (name === 'email' && !regexEmail.test(value)) {\n      setErrors({ ...errors, [name]: 'Введите корректный адрес электронной почты' });\n      setIsValid(false);\n    } else {\n      setErrors({ ...errors, [name]: input.validationMessage });\n      setIsValid(input.closest('form').checkValidity());\n    }\n  };\n\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, handleChange, resetForm, errors, isValid };\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,WAAW,KAAQ,OAAO,CAE1C,MAAO,SAAS,CAAAC,qBAAqBA,CAAA,CAAG,CACtC,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9C,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGP,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9C,KAAM,CAACG,OAAO,CAAEC,UAAU,CAAC,CAAGT,KAAK,CAACK,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAAAK,SAAS,CAAG,iDAAiD,CACnE,KAAM,CAAAC,UAAU,CAAG,kCAAkC,CAErD,KAAM,CAAAC,YAAY,CAAIC,GAAG,EAAK,CAC5B,KAAM,CAAAC,KAAK,CAAGD,GAAG,CAACE,MAAM,CACxB,KAAM,CAAAC,KAAK,CAAGF,KAAK,CAACE,KAAK,CACzB,KAAM,CAAAC,IAAI,CAAGH,KAAK,CAACG,IAAI,CAEvBb,SAAS,CAAC,CAAE,GAAGD,MAAM,CAAE,CAACc,IAAI,EAAGD,KAAM,CAAC,CAAC,CAEvC,GAAIC,IAAI,GAAK,MAAM,EAAI,CAACP,SAAS,CAACQ,IAAI,CAACF,KAAK,CAAC,CAAE,CAC7CT,SAAS,CAAC,CAAE,GAAGD,MAAM,CAAE,CAACW,IAAI,EAAG,2DAA4D,CAAC,CAAC,CAC7FR,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,IAAM,IAAIQ,IAAI,GAAK,OAAO,EAAI,CAACN,UAAU,CAACO,IAAI,CAACF,KAAK,CAAC,CAAE,CACtDT,SAAS,CAAC,CAAE,GAAGD,MAAM,CAAE,CAACW,IAAI,EAAG,4CAA6C,CAAC,CAAC,CAC9ER,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,IAAM,CACLF,SAAS,CAAC,CAAE,GAAGD,MAAM,CAAE,CAACW,IAAI,EAAGH,KAAK,CAACK,iBAAkB,CAAC,CAAC,CACzDV,UAAU,CAACK,KAAK,CAACM,OAAO,CAAC,MAAM,CAAC,CAACC,aAAa,CAAC,CAAC,CAAC,CACnD,CACF,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGrB,WAAW,CAC3B,UAAwD,IAAvD,CAAAsB,SAAS,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,IAAE,CAAAG,SAAS,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,IAAE,CAAAI,UAAU,CAAAJ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CACjDpB,SAAS,CAACmB,SAAS,CAAC,CACpBhB,SAAS,CAACoB,SAAS,CAAC,CACpBlB,UAAU,CAACmB,UAAU,CAAC,CACxB,CAAC,CACD,CAACxB,SAAS,CAAEG,SAAS,CAAEE,UAAU,CACnC,CAAC,CAED,MAAO,CAAEN,MAAM,CAAES,YAAY,CAAEU,SAAS,CAAEhB,MAAM,CAAEE,OAAQ,CAAC,CAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}